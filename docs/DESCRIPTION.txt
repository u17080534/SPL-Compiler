# COMPILER ALGORITHM DESCRIPTION:

00 - LEXER

	The Lexer implementation is as follows:

		(i) The input file is scanned, one character at a time.

		(ii) The DFA (included in docs) is implemented using a while-loop with nested if-statements as follows:

			Each IF considers the possible transitions of current state,
					and the current char is the most recently read character from the input stream:

				IF current Char matches a transition:
				 -> add current Char to the char stack (which is used as a string buffer for the constructed token)
				 -> change current State to transition State

				ELSE IF current state is accept state (implied there is no matching transitions):
				 -> accept token:
					-> character stack is cleared, and appended to the token string
					-> continue to follow the DFA, building the charStack
					-> left over characters are pushed to the buffer stack

				ELSE:
				 -> reject input & throw exception;

			Clearly, the longest potential token is chosen by the lexer - this is why the buffer stack is needed: in the case that the lexer 'sees' a potential token that is longer than the currently accepted token, where it then does not find the rest of the potential token in the following characters - now these left over characters must be pushed to the stack, which is read through before the buffered character stream (so these characters are carried over for the next token to be read.)

		(iii) The DFA is continously used to scan tokens from the input stream, until the input stream is finished, it then returns the scanned tokens if no errors were thrown.

	*ASSUMPTIONS*
		1. Every instruction in a code block, except for the last instruction, must be followed by a semi-colon.
		2. It is considered necessary to place a semicolon between an instruction and a new proc definition, this is because semicolons are needed if it is not last instruction in code block.
		3. It is considered optional to place a semicolon between a new proc definition and an instruction that follows.
		4. Any literal '#' characters in the input will be seen as a newline (newline characters are interpreted normally)
		5. A tab counts as 5 spaces (when counting the character position in the file)

	CONTRIBUTIONS:
		BYRON TOMKINSON	- Planning: NFA+DFA Design & Conversions.
				- Programming: Lexer Class Implementation.
				- Documentation: DFA-JFLAP.

		JORDAN MANAS 	- Planning: NFA+DFA Design & Conversions.
				- Programming: SPL Class Implementation; Lexer Class Implementation; Token Class Implementation; Exception Classes Implementation; Cache Class Implementation; Unit-Testing Class Setup.
				- Documentation: Finite Automata.pdf; SPL Regular Expressions.txt; README.md; DESCRIPTION.txt.

		PATRIC EDWARDS	- Planning: NFA+DFA Design & Conversions.
				- Programming: Unit-Testing Class Implementation.