S 			→ PROG

PROG 		→ PROC_DEFS PROG' | CODE PROG'

PROG' 		→ ; PROC_DEFS | ; CODE | ϵ

PROC_DEFS 	→ PROC PROC_DEFS'

PROC_DEFS'  → PROC_DEFS | CODE | ϵ

PROC 		→ proc UserDefinedIdentifier { PROG } #GenCode

CODE 		→ INSTR CODE'

CODE' 		→ ; CODE | ; PROC_DEFS | ϵ

DECL 		→ TYPE NAME DECL' #GenCode

DECL' 		→ ; DECL | ϵ

IO 			→ input ( VAR ) | output ( VAR ) #GenCode

COND_BRANCH → if ( BOOL ) then { CODE } COND_BRANCH' #GenCode

COND_BRANCH'→ else { CODE } | ϵ #GenCode

COND_LOOP 	→ while ( BOOL ) { CODE } | for ( VAR = 0; VAR < VAR ; VAR = add ( VAR , 1 ) ) { CODE } #GenCode

CALC 		→ add ( CALC' | sub ( CALC' | mult ( CALC' #GenCode

CALC' 		→ NUMEXPR , CALC"

CALC" 		→ NUMEXPR )

BOOL 		→ T | F | VAR | eq ( VAR , VAR ) | ( VAR < VAR ) | ( VAR > VAR ) | not BOOL | and ( BOOL' | or ( BOOL' #GenCode

BOOL' 		→ BOOL , BOOL"

BOOL" 		→ BOOL )

INSTR 		→ halt | DECL | IO | CALL | ASSIGN  | COND_BRANCH | COND_LOOP #GenCode

NUMEXPR 	→ VAR | CALC | integerLiteral #GenCode

TYPE 		→ num | string | bool

CALL 		→ userDefinedIdentifier #GenCode

NAME 		→ userDefinedIdentifier #GenCode

VARIABLE	→ userDefinedIdentifier #GenCode

ASSIGN 		→ VAR = ASSIGN' #GenCode

ASSIGN' 	→ stringLiteral | VAR | NUMEXPR | BOOL
